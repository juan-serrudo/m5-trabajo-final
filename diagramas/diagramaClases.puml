@startuml
left to right direction

' ==== ENTIDADES DEL DOMINIO ====
class Producto {
    - id : String
    - nombre : String
    - descripcion : String
    - precio : double
    - stock : int
}

class Inventario {
    - productos : List<Producto>
    + agregarProducto(p : Producto)
    + verificarStock(id : String, cantidad : int) : boolean
    + actualizarStock(id : String, cantidad : int)
}

class Usuario {
    - id : String
    - nombre : String
    - email : String
    - celular : String
}

class OrdenCompra {
    - id : String
    - usuario : Usuario
    - items : List<ItemOrden>
    - fecha : LocalDateTime
    - estado : EstadoOrden
    + calcularTotal() : double
    + cambiarEstado(nuevoEstado : EstadoOrden)
}

class ItemOrden {
    - producto : Producto
    - cantidad : int
    + calcularSubtotal() : double
}

enum EstadoOrden {
    PENDIENTE
    COMPLETADA
    CANCELADA
}

' ==== INTERFACES DE REPOSITORIO ====
interface RepositorioProducto {
    + guardar(p : Producto)
    + obtenerPorId(id : String) : Producto
    + listar() : List<Producto>
}

interface RepositorioOrdenCompra {
    + guardar(o : OrdenCompra)
    + obtenerPorId(id : String) : OrdenCompra
    + listarPorUsuario(usuarioId : String) : List<OrdenCompra>
}

' ==== SERVICIOS DE APLICACION ====
class ServicioGestionProducto {
    + registrarProducto(nombre : String, descripcion : String, precio : double, stock : int)
    + modificarProducto(id : String, nombre : String, descripcion : String, precio : double, stock : int)
    + eliminarProducto(id : String)
    + listarProductos() : List<Producto>
}

class ServicioProcesarOrden {
    + crearOrden(usuarioId : String, items : List<ItemOrden>)
    + cancelarOrden(ordenId : String)
    + consultarOrden(ordenId : String) : OrdenCompra
    + obtenerTotalOrden(ordenId : String) : double
}

class ServicioGenerarReporte {
    + generarReportePorPeriodo(fechaInicio : LocalDate, fechaFin : LocalDate)
    + obtenerProductosMasVendidos() : List<Producto>
}

' ==== NOTIFICACIONES ====
interface EstrategiaNotificacion {
    + enviar(mensaje : String, usuario : Usuario)
}

class NotificacionEmail {
    + enviar(mensaje : String, usuario : Usuario)
}

class NotificacionWhatsApp {
    + enviar(mensaje : String, usuario : Usuario)
}

class NotificacionTelegram {
    + enviar(mensaje : String, usuario : Usuario)
}

' ==== RELACIONES ENTRE CLASES ====

Inventario "1" --> "*" Producto
OrdenCompra "1" --> "*" ItemOrden
ItemOrden "*" --> "1" Producto
OrdenCompra "*" --> "1" Usuario

RepositorioProducto <|.. ServicioGestionProducto
RepositorioProducto <|.. ServicioProcesarOrden
RepositorioOrdenCompra <|.. ServicioProcesarOrden

EstrategiaNotificacion <|.. NotificacionEmail
EstrategiaNotificacion <|.. NotificacionWhatsApp
EstrategiaNotificacion <|.. NotificacionTelegram

ServicioProcesarOrden --> EstrategiaNotificacion

@enduml
